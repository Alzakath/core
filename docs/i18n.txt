Internationalization of an application
======================================

Since version 0.4.0, the Nagare framework includes a ``nagare.i18n`` module that can help you
internationalize a Web application.

There are many aspects to take into account when internationalizing an application:

- extracting the messages (strings) used inside the application and translating them in each
  language
- displaying the messages in the proper language according to the user's browser settings or a 
  per-user language setting in the application
- formatting numbers, dates, times, currencies for display or parsing them after user input
- dealing with timezone calculations

All these aspects are addressed by the ``nagare.i18n`` module.


Setup an application for internationalization
---------------------------------------------

First, the Nagare ``i18n`` extras should be installed in your virtual environment:

.. code-block:: sh

    $ easy_install nagare[i18n]

This command installs ``Babel`` and ``pytz`` which are necessary to use the ``nagare.i18n`` module.

However, if you plan to use the internationalization feature of Nagare in your Web application, you'd
better change the ``setup.py`` file that is generated when you create the application, in order to specify
that you need the ``i18n`` extra as a requirement:

.. code-block:: python

    setup(
          ...
          install_requires = ('nagare[i18n]', ...),
          ...
    )

Then, Nagare is installed with the ``i18n`` extra when you install your application.

When you create an new application with ``nagare-admin create-app``, Nagare automatically creates a
``setup.cfg`` file that contains a default configuration for extracting the messages to translate,
intializing, updating and compiling the message catalogs: 

.. code-block:: ini

    [extract_messages]
    keywords = _ , _N:1,2 , _L , _LN:1,2 , gettext , ugettext , ngettext:1,2 , ungettext:1,2 , lazy_gettext , lazy_ugettext , lazy_ngettext:1,2 , lazy_ungettext:1,2
    output_file = data/locale/messages.pot
    
    [init_catalog]
    input_file = data/locale/messages.pot
    output_dir = data/locale
    domain = messages
    
    [update_catalog]
    input_file = data/locale/messages.pot
    output_dir = data/locale
    domain = messages
    
    [compile_catalog]
    directory = data/locale
    domain = messages

This configuration file is used by the distutils commands that are automatically registered to ``setuptools``
when ``Babel`` is installed. Here is the list of the commands:

===============================================  ================================================================
                 Command                                                   Effect
===============================================  ================================================================
``python setup.py extract_messages``             Extract the messages from the python sources to a ``.pot`` file
``python setup.py init_catalog -l <lang>``       Create a new message catalog (``.po`` file) for a given
                                                 language, initialized from the ``.pot`` file
``python setup.py update_catalog [-l <lang>``]   Update the message catalog(s) with the new messages found in the
                                                 ``.pot`` file after an ``extract_messages``
``python setup.py compile_catalog [-l <lang>``]  Compile the message catalog(s) to a binary form that can be used
                                                 by the application
===============================================  ================================================================

See the `Babel setup documentation`_ for a complete reference of the commands options.

.. _Babel setup documentation: http://babel.edgewall.org/wiki/Documentation/setup.html

The catalog files are stored in the ``data/locale`` directory by default, which is automatically included into your
application source package thanks to the ``MANIFEST.in`` file. The directory is not created by default, so you
have to create it before issuing any of the ``Babel`` commands:

.. code-block:: sh

    $ mkdir data/locale


Marking the messages to translate
---------------------------------

The ``nagare.i18n`` module provides functions to translate the strings that appear in your code. The most
useful function is ``nagare.i18n._`` which returns the translation of the given string as a unicode string:

..  code-block:: python
    :hl_lines: 2, 9
    
    from nagare import presentation
    from nagare.i18n import _
    
    class I18nExample(object):
        pass
    
    @presentation.render_for(I18nExample)
    def render(self, h, *args):
        h << _('This is a translated string') << h.br
        h << 'This string is not translated'
        return h.root
    
    app = I18nExample


There are also many more functions that deals with strings in ``nagare.i18n``:

=============================================  ================================================================
                Function                                                   Effect
=============================================  ================================================================
``_``                                          Shortcut to ``ugettext``
``_N``                                         Shortcut to ``ungettext``
``_L``                                         Shortcut to ``lazy_ugettext``
``_LN``                                        Shortcut to ``lazy_ungettext``
``gettext``                                    Return the localized translation of a message as a 8-bit string
                                               encoded with the catalog's charset encoding, based on the current
                                               locale set by Nagare
``ugettext``                                   Return the localized translation of a message as a unicode string,
                                               based on the current locale set by Nagare
``ngettext``                                   Like ``gettext`` but consider plurals forms
``nugettext``                                  Like ``ugettext`` but consider plurals forms
``lazy_gettext``                               Like ``gettext`` but with lazy evaluation
``lazy_ugettext``                              Like ``ugettext`` but with lazy evaluation
``lazy_ngettext``                              Like ``ngettext`` but with lazy evaluation
``lazy_nugettext``                             Like ``nugettext`` but with lazy evaluation
=============================================  ================================================================


Note that the ``lazy_*`` variants don't fetch the translation when they are evaluated. Instead Nagare automatically
takes care of fetching the translation at the rendering time when it encounters a lazy translation. This is especially
useful when you want to use translated strings in module or class constants, which are evaluated at definition
time and consequently don't have the locale set properly. Here is how you would define a module constant for use in a
view:

..  code-block:: python
    :hl_lines: 6, 11
    
    from nagare.i18n import _, _L
    
    ...
    
    # the following line is evaluated when the module is loaded, so _ would not work here
    TITLE = _L("This is title")  
    
    @presentation.render_for(I18nExample)
    def render(self, h, *args):
        with h.h1:
            h << TITLE
        h << _('This is a translated string') << h.br
        h << 'This string is not translated'
        return h.root
    
    ...

Extracting the messages
-----------------------

``Babel`` automatically takes care of the messages extraction from the sources when you run the 
``python setup.py extract_messages`` command. Specifically, when it extracts the localizable strings from the sources
files, it only considers the strings enclosed in some specific keywords calls. The list of the supported keywords
appear in the ``setup.cfg`` file:

.. code-block:: ini

    [extract_messages]
    keywords = _ , _N:1,2 , _L , _LN:1,2 , gettext , ugettext , ngettext:1,2 , ungettext:1,2 , lazy_gettext , lazy_ugettext , lazy_ngettext:1,2 , lazy_ungettext:1,2

All the ``nagare.i18n`` functions that deal with strings appear in this list, so you don't have to change this line 
in most cases. However, if you need to add additional translation functions, don't forget to update the keywords
list in this file.

Furthermore, ``nagare-admin create-app`` creates a ``setup.py`` file that contains a line that configures the message
extractors that ``Babel`` will use in order to extract the messages from your source files:

.. code-block:: python

    setup(
          ...
          message_extractors = { 'i18n_example' : [('**.py', 'python', None)] },
          ...
    )

By default, Nagare set up an extractor of the localized strings from the python files. If you have other files that
contain localizable strings (such as ``.js`` files), you'll have to add additional message extractors by yourself.
Please refer the `Babel messages extractor documentation`_ to understand how to add additional message extractors.

.. _Babel messages extractor documentation: http://babel.edgewall.org/wiki/Documentation/messages.html


If you run the ``python setup.py extract_messages`` command on the previous example code, you should obtain the
following ``messages.pot`` file:

.. code-block:: po

    # Translations template for nagare.examples.
    # Copyright (C) 2012 ORGANIZATION
    # This file is distributed under the same license as the nagare.examples
    # project.
    # FIRST AUTHOR <EMAIL@ADDRESS>, 2012.
    #
    #, fuzzy
    msgid ""
    msgstr ""
    "Project-Id-Version: nagare.examples 0.3.0\n"
    "Report-Msgid-Bugs-To: EMAIL@ADDRESS\n"
    "POT-Creation-Date: 2012-03-05 11:05+0100\n"
    "PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
    "Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
    "Language-Team: LANGUAGE <LL@li.org>\n"
    "MIME-Version: 1.0\n"
    "Content-Type: text/plain; charset=utf-8\n"
    "Content-Transfer-Encoding: 8bit\n"
    "Generated-By: Babel 0.9.6\n"
    
    #: nagare/examples/i18n.py:20
    msgid "This is title"
    msgstr ""
    
    #: nagare/examples/i18n.py:26
    msgid "This is a translated string"
    msgstr ""


Translating the messages
------------------------

Once the ``.pot`` file is produced (after message extraction), you have to create a message catalog for each language
with the help of the ``init_catalog`` catalog, for example:

.. code-block:: sh

    $ python setup.py init_catalog -l fr
    $ python setup.py init_catalog -l en

Then update the ``.po`` files that have just been created and provide the translations for all the strings that
do not have one. Finally, compile the catalogs in binary form:

.. code-block:: sh

    $ python setup.py compile_catalog


If you change the source files and add new messages to translate, you have to update the message catalogs:

.. code-block:: sh

    $ python setup.py extract_messages
    $ python setup.py update_catalog
    
Then, fill in the missing translations in the ``.po`` files and compile the catalogs again.

.. code-block:: sh

    $ python setup.py compile_catalog


Formatting numbers, dates, times, currencies and dealing with timezones
-----------------------------------------------------------------------

The ``nagare.i18n`` module also defines functions for formatting numbers, dates, times, currencies and for timezones
calculations, according to the locale of the user. We have grouped these functions by category. See the Nagare
:apidoc:`i18n` API documentation for more information on these functions.


Numbers
~~~~~~~

=============================================  ================================================================
                Function                                                   Effect
=============================================  ================================================================
``get_decimal_symbol``                         Return the symbol used to separate decimal fractions
``get_plus_sign_symbol``                       Return the plus sign symbol
``get_minus_sign_symbol``                      Return the plus sign symbol
``get_exponential_symbol``                     Return the symbol used to separate mantissa and exponent
``get_group_symbol``                           Return the symbol used to separate groups of thousands

``format_number``                              Return the given number formatted
``format_decimal``                             Return the given decimal number formatted
``format_percent``                             Return the formatted percent value
``format_scientific``                          Return the value formatted in scientific notation

``parse_number``                               Parse the localized number string into a long integer
``parse_decimal``                              Parse the localized decimal string into a float
=============================================  ================================================================


Currencies
~~~~~~~~~~

=============================================  ================================================================
                Function                                                   Effect
=============================================  ================================================================
``get_currency_name``                          Return the name used for the specified currency
``get_currency_symbol``                        Return the symbol used for the specified currency
``format_currency``                            Return formatted currency value
=============================================  ================================================================


Dates & timezones
~~~~~~~~~~~~~~~~~

=============================================  ================================================================
                Function                                                   Effect
=============================================  ================================================================
``get_period_names``                           Return the names for day periods (AM/PM)
``get_day_names``                              Return the day names for the specified format
``get_month_names``                            Return the month names for the specified format
``get_quarter_names``                          Return the quarter names for the specified format
``get_era_names``                              Return the era names used for the specified format
``get_date_format``                            Return the date formatting pattern for the specified format
``get_datetime_format``                        Return the datetime formatting pattern for the specified format
``get_time_format``                            Return the time formatting pattern for the specified format
``get_timezone_gmt``                           Return the timezone associated with the given datetime object,
                                               formatted as a string indicating the offset from GMT
``get_timezone_location``                      Return a representation of the given timezone using the "location
                                               format"
``get_timezone_name``                          Return the localized display name for the given timezone

``format_time``                                Return a time formatted according to the given pattern
``format_date``                                Return a date formatted according to the given pattern
``format_datetime``                            Return a datetime formatted according to the given pattern

``parse_time``                                 Parse a time from a string
``parse_date``                                 Parse a date from a string

``to_timezone``                                Return a localized datetime object
``to_utc``                                     Return a UTC datetime object
=============================================  ================================================================


Setting the locale of the application
-------------------------------------

Language setting:
- use the browser language settings (``Accept-Language`` headers of the request)
- per-user setting in the application
- urls
- configuration file


.. wikiname: Internationalization
